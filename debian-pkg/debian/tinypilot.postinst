#!/bin/bash

# Exit script on first failure.
set -e

# Exit on unset variable.
set -u

readonly TINYPILOT_USER="tinypilot"
readonly TINYPILOT_GROUP="tinypilot"
readonly TINYPILOT_HOME_DIR="/home/${TINYPILOT_USER}"
readonly TINYPILOT_SETTINGS_FILE="${TINYPILOT_HOME_DIR}/settings.yml"
readonly USTREAMER_CONFIG_FILE="/opt/ustreamer-launcher/configs.d/100-tinypilot.yml"

# Create tinypilot group if it doesn't already exist.
getent group "${TINYPILOT_GROUP}" > /dev/null || \
  addgroup \
    --system \
    "${TINYPILOT_GROUP}"

# adduser is idempotent, so we don't need to check existence first.
adduser \
  --system \
  `# We have to specify a shell to override the default /usr/sbin/nologin, ` \
  `# which prevents us from executing commands through "sudo su".` \
  --shell /bin/bash \
  --ingroup "${TINYPILOT_GROUP}" \
  --home "${TINYPILOT_HOME_DIR}" \
  "${TINYPILOT_USER}"

chown -R "${TINYPILOT_USER}:${TINYPILOT_GROUP}" /opt/tinypilot

# Enable the dwc2 kernel driver, which we need to emulate USB devices with USB
# OTG.
readonly MODULES_PATH='/etc/modules'
if ! grep --quiet '^dwc2$' "${MODULES_PATH}" ; then
  echo 'dwc2' | tee --append "${MODULES_PATH}"
fi
readonly BOOT_CONFIG_PATH='/boot/config.txt'
if ! grep --quiet '^dtoverlay=dwc2$' "${BOOT_CONFIG_PATH}" ; then
  echo 'dtoverlay=dwc2' | tee --append "${BOOT_CONFIG_PATH}"
fi

# Use TinyPilot's settings to override uStreamer's runtime variables.
if [[ ! -L "${USTREAMER_CONFIG_FILE}" ]]; then
  ln \
    --symbolic \
    "${TINYPILOT_SETTINGS_FILE}" \
    "${USTREAMER_CONFIG_FILE}"
fi

# Populate TinyPilot's Flask settings file.
pushd /opt/tinypilot > /dev/null
readonly TINYPILOT_APP_SETTINGS='/home/tinypilot/app_settings.cfg'
SETTINGS_TEMPLATE="$(cat <<-'EOF'
# This configuration file is an actual Python file. Only variables in uppercase
# are recognized as config keys.

KEYBOARD_PATH = '{{ tinypilot_keyboard_interface }}'
MOUSE_PATH = '{{ tinypilot_mouse_interface }}'
EOF
)"
readonly SETTINGS_TEMPLATE
. venv/bin/activate && \
  PYTHONPATH=/opt/tinypilot/app \
    ./scripts/render-template \
  <<< "${SETTINGS_TEMPLATE}" \
  > "${TINYPILOT_APP_SETTINGS}" && \
  deactivate
chown "${TINYPILOT_USER}:${TINYPILOT_GROUP}" "${TINYPILOT_APP_SETTINGS}"
popd > /dev/null

# Populate TinyPilot's NGINX config file.
readonly TINYPILOT_NGINX_TEMPLATE_FILE='/usr/share/tinypilot/templates/tinypilot.conf.j2'
TINYPILOT_NGINX_TEMPLATE="$(cat "${TINYPILOT_NGINX_TEMPLATE_FILE}")"
readonly TINYPILOT_NGINX_TEMPLATE
readonly TINYPILOT_NGINX_FILE='/etc/nginx/sites-available/tinypilot.conf'
pushd /opt/tinypilot > /dev/null
. venv/bin/activate && \
  PYTHONPATH=/opt/tinypilot/app \
    ./scripts/render-template \
  <<< "${TINYPILOT_NGINX_TEMPLATE}" \
  > "${TINYPILOT_NGINX_FILE}" && \
  deactivate
chown "${TINYPILOT_USER}:${TINYPILOT_GROUP}" "${TINYPILOT_NGINX_FILE}"
popd > /dev/null

# Enable TinyPilot's NGINX server.
readonly TINYPILOT_NGINX_ENABLE_LINK='/etc/nginx/sites-enabled/tinypilot.conf'
ln \
  --symbolic \
  --force \
  "${TINYPILOT_NGINX_FILE}" \
  "${TINYPILOT_NGINX_ENABLE_LINK}"

# Disable default NGINX server.
rm -f \
  /etc/nginx/sites-enabled/default

# Test and reload NGINX config.
nginx -t > /dev/null
nginx -s reload

#DEBHELPER#
